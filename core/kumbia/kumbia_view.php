<?php

/**
 * KumbiaPHP web & app Framework
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.
 *
 * @category   View
 *
 * @copyright  Copyright (c) 2005 - 2019 KumbiaPHP Team (http://www.kumbiaphp.com)
 * @license    https://github.com/KumbiaPHP/KumbiaPHP/blob/master/LICENSE   New BSD License
 */

/**
 * Render views.
 *
 * @category   View
 */
class KumbiaView
{
    /**
     * Content.
     *
     * @var string|null
     */
    protected static $_content;
    /**
     * View to render.
     *
     * @var string
     * */
    protected static $_view;
    /**
     * Template.
     *
     * @var string|null
     */
    protected static $_template = 'default';
    /**
     * Indicates the type of output generated by the controller.
     *
     * @var string
     */
    protected static $_response;
    /**
     * Indicates the path to which the corresponding constant will be added.
     *
     * @var string
     */
    protected static $_path;
    /**
     * Number of minutes the current view will be cached.
     *
     * type: cache type (view, template)
     * time: cache life time
     *
     * @var array
     */
    protected static $_cache = array('type' => false, 'time' => false, 'group' => false);

    /**
     * Data of the current controller.
     *
     * @var array
     */
    protected static $_controller;

    /**
     * Change the view and optionally the template.
     *
     * @param string|null    $view     name of the view to use without .phtml
     * @param string|null    $template optional template name to use without .phtml
     * 
     * @return void
     */
    public static function select($view, $template = '')
    {
        self::$_view = $view;

        // check if template was indicated
        if ($template !== '') {
            self::$_template = $template;
        }
    }

    /**
     * Assign the template for the view.
     *
     * @param string|null $template template name to use without .phtml
     * 
     * @return void
     */
    public static function template($template)
    {
        self::$_template = $template;
    }

    /**
     * Indicates the type of response given by the controller
     * Looking for the view with that extension.
     * ex. View :: response ('xml');
     * search: views / controller / action.xml.phtml.
     *
     * @param string        $response
     * @param string|null   $template Optional template name without .phtml
     * 
     * @return void
     */
    public static function response($response, $template = null)
    {
        self::$_response = $response;

        // check if template was indicated
        if ($template !== null) {
            self::$_template = $template;
        }
    }

    /**
     * Assign the view path.
     *
     * @param string $path view path without extension .phtml
     * 
     * @return void
     */
    public static function setPath($path)
    {
        self::$_path = $path . '/';
    }

    /**
     * Get the path for view including the extension .phtml.
     *
     * @return string
     */
    public static function getPath()
    {
        if (self::$_response) {
            return self::$_path . self::$_view . '.' . self::$_response . '.phtml';
        }

        return self::$_path . self::$_view . '.phtml';
    }

    /**
     * Gets an attribute of KumbiaView.
     *
     * @param string $atribute attribute name (template, response, path, etc)
     * 
     * @return mixed
     */
    public static function get($atribute)
    {
        return self::${"_$atribute"};
    }

    /**
     * Assign view caching or template.
     *
     * @param string|null  $time Cache lifetime
     * @param string        $type Type of cache (view, template)
     * @param string        $group Cache membership group
     *
     * @return bool In production and view cache
     */
    public static function cache($time, $type = 'view', $group = 'kumbia.view')
    {
        if ($time === null) { //ALL clear cache
            return self::$_cache['type'] = false;
        }
        self::$_cache['type'] = $type;
        self::$_cache['time'] = $time;
        self::$_cache['group'] = $group;
        //If it is in production for view
        if (PRODUCTION && $type === 'view') {
            return self::getCache(); //TRUE if it is cached
        }

        return false;
    }

    /**
     * Get the view cache.
     *
     * @return bool
     */
    protected static function getCache()
    {
        // the content remains null if nothing is cached or the cache expires
        self::$_content = Cache::driver()->get(Router::get('route'), self::$_cache['group']);

        return self::$_content !== null;
    }

    /**
     * Get the view.
     *
     * @return string view path
     */
    protected static function getView()
    {
        $file = APP_PATH . 'views/' . self::getPath();
        //If the view does not exist and is scaffold
        if (!is_file($file) && ($scaffold = self::$_controller['scaffold'])) {
            $file = APP_PATH . "views/_shared/scaffolds/$scaffold/" . self::$_view . '.phtml';
        }

        return $file;
    }

    /**
     * Cache the view or template.
     *
     * @param string $type view or template
     * 
     * @return void
     */
    protected static function saveCache($type)
    {
        // if it is in production and the view is cached
        if (PRODUCTION && self::$_cache['type'] === $type) {
            Cache::driver()->save(ob_get_contents(), self::$_cache['time'], Router::get('route'), self::$_cache['group']);
        }
    }

    /**
     * Render the view.
     *
     * @param Controller $controller
     * 
     * @return void
     */
    public static function render(Controller $controller)
    {
        if (!self::$_view && !self::$_template) {
            ob_end_flush();

            return;
        }

        // Save controller data and send
        self::generate(self::$_controller = get_object_vars($controller));
    }

    /**
     * It generates the view.
     *
     * @param array $controller
     * 
     * @return void
     */
    protected static function generate($controller)
    {
        // Register helper autoload
        spl_autoload_register('kumbia_autoload_helper', true, true);
        // Map controller attributes in scope
        extract($controller, EXTR_OVERWRITE);

        // load the view if it has a view and is not cached
        if (self::$_view && self::$_content === null) {
            // Load the contents of the output buffer
            self::$_content = ob_get_clean();
            // Render view
            ob_start();

            // load the view
            if (!include self::getView()) {
                throw new KumbiaException('View"' . self::getPath() . '" Not found', 'no_view');
            }

            // if it is in production and the view is cached
            self::saveCache('view');

            // Check if there is a template
            if (!self::$_template) {
                ob_end_flush();

                return;
            }

            self::$_content = ob_get_clean();
            ob_clean();
        }

        // Render template
        if ($__template = self::$_template) {
            ob_start();

            // load the template
            if (!include APP_PATH . "views/_shared/templates/$__template.phtml") {
                throw new KumbiaException("Template $__template not found");
            }

            // if it is in production and template is cached
            self::saveCache('template');
            ob_end_flush();

            return;
        }

        echo self::$_content;
    }

    /**
     * Print the contents of the buffer.
     * 
     * @return void
     */
    public static function content()
    {
        if (isset($_SESSION['KUMBIA.CONTENT'])) {
            echo $_SESSION['KUMBIA.CONTENT'];
            unset($_SESSION['KUMBIA.CONTENT']);
        }
        echo self::$_content;
    }

    /**
     * Render a partial view.
     *
     * @throw KumbiaException
     * @param  string            $partial view to render
     * @param  string            $__time  cache time
     * @param  array|string|null $params  variables for the partial
     * @param  string            $group   cache group
     * @return void
     */
    public static function partial($partial, $__time = '', $params = null, $group = 'kumbia.partials')
    {
        if (PRODUCTION && $__time && !Cache::driver()->start($__time, $partial, $group)) {
            return;
        }

        //Verifying the partials in the dir app
        $__file = APP_PATH . "views/_shared/partials/$partial.phtml";

        if (!is_file($__file)) {
            //Verifying the partials in the core dir
            $__file = CORE_PATH . "views/partials/$partial.phtml";
        }

        if ($params) {
            if (is_string($params)) {
                $params = Util::getParams(explode(',', $params));
            }

            // load the parameters into the scope
            extract($params, EXTR_OVERWRITE);
        }

        // load partial view
        if (!include $__file) {
            throw new KumbiaException('Partial view "' . $__file . '" Not found', 'no_partial');
        }

        // it is stored in the cache if required
        if (PRODUCTION && $__time) {
            Cache::driver()->end();
        }
    }

    /**
     * Gets the value of a public attribute or all of the controller.
     *
     * @param string $var variable name
     *
     * @return mixed variable value
     */
    public static function getVar($var = '')
    {
        if (!$var) {
            return self::$_controller;
        }

        return isset(self::$_controller[$var]) ? self::$_controller[$var] : null;
    }
}

/**
 * Shortcut for htmlspecialchars, by default it takes the charset of the
 * application.
 *
 * @param string $string
 * @param string $charset
 *
 * @return string
 */
function h($string, $charset = APP_CHARSET)
{
    return htmlspecialchars($string, ENT_QUOTES, $charset);
}
