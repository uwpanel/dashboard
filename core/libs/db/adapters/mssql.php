<?php

/**
 * KumbiaPHP web & app Framework
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.
 *
 * @category   Kumbia
 * @package    Db
 * @subpackage Adapters
 *
 * @copyright  Copyright (c) 2005 - 2019 KumbiaPHP Team (http://www.kumbiaphp.com)
 * @license    https://github.com/KumbiaPHP/KumbiaPHP/blob/master/LICENSE   New BSD License
 */

/**
 * Microsoft SQL Server Database Support.
 *
 * @category   Kumbia
 * @package    Db
 * @subpackage Adapters
 */
class DbMsSQL extends DbBase implements DbBaseInterface
{
    /**
     * Resource of the Connection to MsSQL.
     *
     * @var resource
     */
    public $id_connection;

    /**
     * Last Result of a Query.
     *
     * @var resource
     */
    public $last_result_query;

    /**
     * Last SQL statement sent to MsSQL.
     *
     * @var string
     */
    protected $last_query;

    /**
     * Last error generated by MsSQL.
     *
     * @var string
     */
    public $last_error;

    /**
     * Associative Array Result.
     */
    const DB_ASSOC = MSSQL_ASSOC;

    /**
     * Associative and Numerical Array Result.
     */
    const DB_BOTH = MSSQL_BOTH;

    /**
     * Numerical Array Result.
     */
    const DB_NUM = MSSQL_NUM;

    /**
     * Integer Data Type.
     */
    const TYPE_INTEGER = 'INT';

    /**
     * Data Type Date.
     */
    const TYPE_DATE = 'SMALLDATETIME';

    /**
     * Varchar Data Type.
     */
    const TYPE_VARCHAR = 'VARCHAR';

    /**
     * Decimal Data Type.
     */
    const TYPE_DECIMAL = 'DECIMAL';

    /**
     * Datetime Data Type.
     */
    const TYPE_DATETIME = 'DATETIME';

    /**
     * Data Type Char.
     */
    const TYPE_CHAR = 'CHAR';

    /**
     * Makes a connection to the MsSQL database.
     *
     * @param array $config
     *
     * @return bool
     */
    public function connect(array $config)
    {
        if (!extension_loaded('mssql')) {
            throw new KumbiaException('You must load the PHP extension called php_mssql');
        }
        if (!isset($config['port']) || !$config['port']) {
            $config['port'] = 1433;
        }
        //if($this->id_connection = mssql_connect("{$config['host']},{$config['port']}", $config['username'], $config['password'], true)){
        if ($this->id_connection = mssql_connect($config['host'], $config['username'], $config['password'], true)) {
            if ($config['name'] !== '') {
                if (!mssql_select_db($config['name'], $this->id_connection)) {
                    throw new KumbiaException($this->error());
                }
            }

            return true;
        }
        throw new KumbiaException($this->error());
    }

    /**
     * Performs SQL operations on the database.
     *
     * @param string $sql_query
     *
     * @return resource or false
     */
    public function query($sql_query)
    {
        $this->debug($sql_query);
        if ($this->logger) {
            Logger::debug($sql_query);
        }

        $this->last_query = $sql_query;
        if ($result_query = mssql_query($sql_query, $this->id_connection)) {
            $this->last_result_query = $result_query;

            return $result_query;
        }
        throw new KumbiaException($this->error("when executing <em>\"$sql_query\"</em>"));
    }

    /**
     * Close the Database Engine Connection.
     */
    public function close()
    {
        if ($this->id_connection) {
            return mssql_close();
        }

        return false;
    }

    /**
     * Returns the content of a select row by row.
     *
     * @param resource $result_query
     * @param int      $opt
     *
     * @return array
     */
    public function fetch_array($result_query = '', $opt = MSSQL_BOTH)
    {
        if (!$result_query) {
            $result_query = $this->last_result_query;
            if (!$result_query) {
                return false;
            }
        }

        return mssql_fetch_array($result_query, $opt);
    }

    /**
     * Class Builder
     *
     * @param array $config
     */
    public function __construct($config)
    {
        $this->connect($config);
    }

    /**
     * Returns the number of rows of a select.
     */
    public function num_rows($result_query = '')
    {
        if (!$result_query) {
            $result_query = $this->last_result_query;
            if (!$result_query) {
                return false;
            }
        }
        if (($number_rows = mssql_num_rows($result_query)) !== false) {
            return $number_rows;
        }
        throw new KumbiaException($this->error());
    }

    /**
     * Returns the name of a field in the result of a select.
     *
     * @param int      $number
     * @param resource $result_query
     *
     * @return string
     */
    public function field_name($number, $result_query = '')
    {
        if (!$result_query) {
            $result_query = $this->last_result_query;
            if (!$result_query) {
                return false;
            }
        }
        if (($fieldName = mssql_field_name($result_query, $number)) !== false) {
            return $fieldName;
        } else {
            throw new KumbiaException($this->error());
        }
    }

    /**
     * It moves to the result indicated by 3 in a select.
     *
     * @param int      $number
     * @param resource $result_query
     *
     * @return bool
     */
    public function data_seek($number, $result_query = '')
    {
        if (!$result_query) {
            $result_query = $this->last_result_query;
            if (!$result_query) {
                return false;
            }
        }
        if (($success = mssql_data_seek($result_query, $number)) !== false) {
            return $success;
        } else {
            throw new KumbiaException($this->error());
        }
    }

    /**
     * Number of rows affected in an insert, update or delete.
     *
     * @param resource $result_query
     *
     * @return int
     */
    public function affected_rows($result_query = '')
    {
        if (($numberRows = mssql_affected_rows()) !== false) {
            return $numberRows;
        } else {
            throw new KumbiaException($this->error());
        }
    }

    /**
     * Returns the MsSQL error.
     *
     * @return string
     */
    public function error($err = '')
    {
        if (!$this->id_connection) {
            $this->last_error = mssql_get_last_message() ?: "[Unknown Error in MsSQL: $err]";
            if ($this->logger) {
                Logger::error($this->last_error);
            }

            return $this->last_error;
        }
        $this->last_error = mssql_get_last_message() ?: "[Unknown Error in MsSQL: $err]";
        $this->last_error .= $err;
        if ($this->logger) {
            Logger::error($this->last_error);
        }

        return $this->last_error;
    }

    /**
     * Returns the no MsSQL error.
     *
     * @return int
     */
    public function no_error()
    {
        return mssql_errno();
    }

    /**
     * Returns the last auto-numeric id generated in the database.
     *
     * @return int
     */
    public function last_insert_id($table = '', $primary_key = '')
    {
        //$id = false;
        $result = mssql_query("select max({$primary_key}) from $table");
        if ($row = mssql_fetch_row($result)) {
            $this->id_connection = trim($row[0]);
        }
        mssql_free_result($result);

        return $this->id_connection;
    }

    /**
     * Check if a table exists or not.
     *
     * @param string $table
     *
     * @return bool
     */
    public function table_exists($table, $schema = '')
    {
        $table = addslashes("$table");
        if ($schema == '') {
            $num = $this->fetch_one("SELECT COUNT(*) FROM
                        INFORMATION_SCHEMA.TABLES
                        WHERE TABLE_NAME = '$table'");
        } else {
            $schema = addslashes("$schema");
            $num = $this->fetch_one("SELECT COUNT(*) FROM
                        INFORMATION_SCHEMA.TABLES
                        WHERE TABLE_NAME = '$table'
                        AND TABLE_SCHEMA = '$schema'");
        }

        return $num[0];
    }

    /**
     * Returns a valid LIMIT for a SELECT of the RBDM.
     *
     * @param string $sql sql query
     *
     * @return string
     */
    public function limit($sql)
    {
        $params = Util::getParams(func_get_args());

        //EVERYTHING: add offset
        if (isset($params['limit'])) {
            $sql = str_ireplace('SELECT ', "SELECT TOP $params[limit] ", $sql);
        }

        return $sql;
    }

    /**
     * Delete a table from the database.
     *
     * @param string $table
     *
     * @return resource
     */
    public function drop_table($table, $if_exists = true)
    {
        if ($if_exists) {
            $sql = "IF EXISTS(SELECT TABLE_NAME FROM
            INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '$table')
            DROP TABLE $table;";

            return $this->query($sql);
        }

        return $this->query("DROP TABLE $table");
    }

    /**
     * List the tables in the database.
     *
     * @return array
     */
    public function list_tables()
    {
        return $this->fetch_all('SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES');
    }

    /**
     * List the fields of a table.
     *
     * @param string $table
     *
     * @return array
     */
    public function describe_table($table, $schema = '')
    {
        $describeTable = $this->fetch_all("exec sp_columns @table_name = '$table'");
        $finalDescribe = array();
        foreach ($describeTable as $field) {
            $finalDescribe[] = array(
                'Field' => $field['COLUMN_NAME'],
                'Type' => $field['LENGTH'] ? $field['TYPE_NAME'] : $field['TYPE_NAME'] . '(' . $field['LENGTH'] . ')',
                'Null' => $field['NULLABLE'] == 1 ? 'YES' : 'NO',
            );
        }
        $describeKeys = $this->fetch_all("exec sp_pkeys @table_name = '$table'");
        foreach ($describeKeys as $field) {
            for ($i = 0; $i <= count($finalDescribe) - 1; ++$i) {
                if ($finalDescribe[$i]['Field'] == $field['COLUMN_NAME']) {
                    $finalDescribe[$i]['Key'] = 'PRI';
                } else {
                    $finalDescribe[$i]['Key'] = '';
                }
            }
        }

        return $finalDescribe;
    }

    /**
     * Returns the content of a select row by row.
     *
     * @param resource $result_query
     *
     * @return object
     */
    public function fetch_object($result_query = null)
    {
        if (!$result_query) {
            $result_query = $this->last_result_query;
        }

        return mssql_fetch_object($result_query);
    }

    public function create_table($table, $definition, $index = array())
    {
    }
}
